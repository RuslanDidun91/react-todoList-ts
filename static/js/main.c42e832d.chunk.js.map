{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","task","changeTaskStatus","changeTaskTitle","removeTask","useCallback","id","changeStatus","deleteTask","className","isDone","Checkbox","checked","Delete","TodoList","tasksForTodoList","tasks","filter","t","taskId","newTitle","map","setAllFilterValue","changeTodoListFilter","setActiveFilterValue","setCompletedFilterValue","AddTask","addTask","changeTodoListTitle","removeTodoList","style","listStyle","padding","Button","marginRight","size","initialState","v1","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListID","todoListId","type","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","newFilterValue","changeTodoListFilterAC","removeTodoListAC","addTodoList","addTodoListAC","changeTodoListTitleAC","todoListComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","action","newTask","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c42e832d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\"\nimport {IconButton} from \"@material-ui/core\"\nimport {AddBox} from \"@material-ui/icons\"\nimport TextField from \"@material-ui/core/TextField\"\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log('sdf')\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<string | null>('')\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        error && setError(null)\n        setTitle(e.currentTarget.value)\n    }\n\n    const addItem = () => {\n        if (title.trim()) {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        error && setError('')\n        e.key === 'Enter' && addItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant={\"outlined\"}\n                value={title}\n                onChange={changeTitle}\n                onKeyPress={onKeyPressAddItem}\n                label={\"Title\"}\n                error={!!error}\n                helperText={error}\n            />\n\n            <IconButton onClick={addItem} color={\"primary\"}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n","import React, {ChangeEvent, useState} from \"react\"\nimport {TextField} from \"@material-ui/core\"\n\nexport type EditableSpanPropsType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const onEditMode = () => setEditMode(true)\n\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return (\n        editMode\n            ? <TextField\n                color={\"primary\"}\n                variant={\"standard\"}\n                value={title}\n                autoFocus\n                onBlur={offEditMode}\n                onChange={changeTitle}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n})\n\n","import React, {useCallback} from \"react\"\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"../AppWithRedux\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    changeTaskStatus: (taskId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string) => void\n    removeTask: (taskId: string) => void\n}\n\nexport const Task = React.memo(({task, changeTaskStatus, changeTaskTitle, removeTask}: TaskPropsType ) => {\n\n    const changeTitle = useCallback((title: string) => changeTaskTitle(task.id, title), [changeTaskTitle, task.id])\n    const changeStatus = useCallback(() => changeTaskStatus(task.id), [changeTaskStatus, task.id])\n    const deleteTask = useCallback(() => removeTask(task.id), [removeTask, task.id])\n\n    return (\n        <li key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\n            <Checkbox\n                color={\"primary\"}\n                checked={task.isDone}\n                onChange={changeStatus}\n            />\n\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\n\n            <IconButton onClick={deleteTask}>\n                <Delete/>\n            </IconButton>\n        </li>\n    )\n})\n\n","import React, {useCallback} from \"react\"\nimport {AddItemForm} from \"./AddItemForm\"\nimport {EditableSpan} from \"./EditableSpan\"\nimport {Button} from \"@material-ui/core\"\nimport {Delete} from \"@material-ui/icons\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport {FilterValueType, TaskType} from \"../AppWithReducer\";\nimport {Task} from \"./Task\";\ntype TodoListPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeTodoListFilter: (newFilterValue: FilterValueType, todoListID: string) => void\n    removeTask: (taskId: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    filter: FilterValueType\n    changeTaskStatus: (taskId: string, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\n    changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n    // let todoList = useSelector<AppRootStateType, TodoListType>(state => state.todolists.filter(t => t.id === props.id)[0])\n    // let tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\n\n    // let dispatch = useDispatch()\n    let tasksForTodoList = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodoList = props.tasks.filter(t => !t.isDone)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodoList = props.tasks.filter(t => t.isDone)\n    }\n\n    const removeTask = useCallback((taskId: string) => props.removeTask(taskId, props.id), [props.removeTask, props.id])\n    const changeTaskStatus = useCallback((taskId: string) => props.changeTaskStatus(taskId, props.id), [props.changeTaskStatus, props.id])\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string) => props.changeTaskTitle(taskId, newTitle, props.id), [props.changeTaskTitle, props.id])\n\n    const tasks = tasksForTodoList.map(t => <Task task={t}\n                                                  key={t.id}\n                                                  removeTask={removeTask}\n                                                  changeTaskStatus={changeTaskStatus}\n                                                  changeTaskTitle={changeTaskTitle}\n    /> )\n\n    const setAllFilterValue = useCallback(() => props.changeTodoListFilter('all', props.id),[props.changeTodoListFilter, props.id])\n    const setActiveFilterValue = useCallback(() => props.changeTodoListFilter('active', props.id),[props.changeTodoListFilter, props.id])\n    const setCompletedFilterValue = useCallback(() => props.changeTodoListFilter('completed', props.id),[props.changeTodoListFilter, props.id])\n\n    const removeTodoList = () => props.removeTodoList(props.id)\n\n    const AddTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\n\n    const changeTodoListTitle = useCallback( (title: string) => props.changeTodoListTitle(title, props.id), [props.changeTodoListTitle, props.id])\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n\n            <AddItemForm addItem={AddTask}/>\n\n            <ul style={{listStyle: \"none\", padding: \"0px\"}}>\n                {tasks}\n            </ul>\n\n            <div>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.filter === \"all\" ? \"outlined\" : \"contained\"}\n                    onClick={setAllFilterValue}>All</Button>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.filter === \"active\" ? \"outlined\" : \"contained\"}\n                    onClick={setActiveFilterValue}>Active</Button>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"contained\"}\n                    onClick={setCompletedFilterValue}>Completed</Button>\n            </div>\n        </div>\n    )\n})\n\n","import {v1} from \"uuid\";\nimport {FilterValueType, TodoListType} from \"../AppWithReducer\";\nimport {todoListID_1, todoListID_2} from \"./tasks-reducer\";\n\nexport type RemoveTodoListAT = {\n    type: 'REMOVE-TODOLIST'\n    todoListID: string\n}\n\nexport type AddTodoListAT = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todoListID: string\n}\n\ntype ChangeTodoListTitleAT = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    title: string\n    todoListID: string\n}\n\ntype changeTodoListFilterAT = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    newFilterValue: FilterValueType\n    todoListID: string\n}\n\ntype ActionsType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListTitleAT | changeTodoListFilterAT\n\nlet initialState: Array<TodoListType> = []\n\nexport const todoListReducer = (todoLists: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return todoLists.filter(tl => tl.id !== action.todoListID)\n        case \"ADD-TODOLIST\":\n            const newTodoList: TodoListType = {\n                id: action.todoListID, title: action.title, filter: 'all'\n            }\n\n            return [...todoLists, newTodoList]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return todoLists.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.newFilterValue} : tl)\n        default:\n            return todoLists\n    }\n}\n\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListAT => {\n    return {\n        type: 'REMOVE-TODOLIST',\n        todoListID\n    }\n}\n\nexport const addTodoListAC = (title: string): AddTodoListAT => {\n    return {\n        type: 'ADD-TODOLIST',\n        title,\n        todoListID: v1()\n    }\n}\n\nexport const changeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleAT => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        title,\n        todoListID\n    }\n}\n\nexport const changeTodoListFilterAC = (newFilterValue: FilterValueType, todoListID: string): changeTodoListFilterAT => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        newFilterValue,\n        todoListID\n    }\n}","import {v1} from \"uuid\";\nimport {AddTodoListAT, RemoveTodoListAT} from \"./todolists-reducer\";\nimport {TasksStateType, TaskType} from \"../AppWithReducer\";\n\ntype RemoveTaskType = {\n    type: 'DELETE-TASK'\n    taskId: string\n    todoListId: string\n}\n\ntype AddTaskType = {\n    type: 'ADD-TASK'\n    title: string\n    todoListId: string\n}\n\ntype changeTaskStatusType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    todoListId: string\n}\n\nexport type changeTaskTitleType = {\n    type: 'CHANGE-TASK-TITLE'\n    taskId: string\n    title: string\n    todoListID: string\n}\n\ntype ActionsType = RemoveTaskType | AddTaskType | changeTaskStatusType | changeTaskTitleType | RemoveTodoListAT | AddTodoListAT\n\nexport const todoListID_1 = v1()\nexport const todoListID_2 = v1()\n\nlet initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case \"DELETE-TASK\":\n            state[action.todoListId] = state[action.todoListId].filter(t => t.id !== action.taskId)\n            return {...state}\n        case \"ADD-TASK\":\n            let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\n            return {\n                ...state,\n                [action.todoListId]: [newTask, ...state[action.todoListId]]\n            }\n        case \"CHANGE-TASK-STATUS\":\n            state[action.todoListId] = state[action.todoListId].map(t => t.id === action.taskId ? {...t, isDone: !t.isDone} : t)\n            return {...state}\n        case \"CHANGE-TASK-TITLE\":\n            state[action.todoListID] = state[action.todoListID].map(t => t.id === action.taskId ? {...t, title: action.title} : t)\n            return {...state}\n        case \"REMOVE-TODOLIST\":\n            delete state[action.todoListID]\n            return {...state}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todoListID]: []}\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskType => {\n    return {\n        type: 'DELETE-TASK',\n        taskId,\n        todoListId\n    }\n}\n\nexport const addTaskAC = (title: string, todoListId: string): AddTaskType => {\n    return {\n        type: 'ADD-TASK',\n        title,\n        todoListId\n    }\n}\n\nexport const changeTaskStatusAC = (taskId: string, todoListId: string): changeTaskStatusType => {\n    return {\n        type: 'CHANGE-TASK-STATUS',\n        taskId,\n        todoListId\n    }\n}\n\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListID: string): changeTaskTitleType => {\n    return {\n        type: 'CHANGE-TASK-TITLE',\n        taskId,\n        title,\n        todoListID\n    }\n}","import React, {useCallback} from \"react\"\nimport \"./App.css\"\nimport {TodoList} from \"./components/TodoList\"\nimport {AddItemForm} from \"./components/AddItemForm\"\nimport {AppBar} from \"@material-ui/core\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Button from \"@material-ui/core/Button\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport {Menu} from \"@material-ui/icons\"\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Paper from \"@material-ui/core/Paper\"\nimport {\n    addTodoListAC, changeTodoListFilterAC,\n    changeTodoListTitleAC, removeTodoListAC\n} from \"./state/todolists-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type FilterValueType = 'all' | 'active' | 'completed'\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValueType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction AppWithRedux() {\n    let todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    let dispatch = useDispatch()\n\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\n        dispatch(removeTaskAC(taskId, todoListID))\n    }, [dispatch])\n\n    const addTask = useCallback( (title: string, todoListID: string) => {\n        dispatch(addTaskAC(title, todoListID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback( (taskId: string, todoListID: string) => {\n        dispatch(changeTaskStatusAC(taskId, todoListID))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback( (taskId: string, title: string, todoListID: string) => {\n        dispatch(changeTaskTitleAC(taskId, title, todoListID ))\n    }, [dispatch])\n\n    const changeTodoListFilter = useCallback( (newFilterValue: FilterValueType, todoListID: string) => {\n        dispatch(changeTodoListFilterAC(newFilterValue, todoListID))\n    }, [dispatch])\n\n    const removeTodoList = useCallback( (todoListID: string) => {\n        dispatch(removeTodoListAC(todoListID))\n    }, [dispatch])\n\n    const addTodoList = useCallback( (title: string) => {\n        dispatch(addTodoListAC(title))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback( (title: string, todoListID: string) => {\n        dispatch(changeTodoListTitleAC(title, todoListID))\n    }, [dispatch])\n\n    const todoListComponents = todoLists.map(tl => {\n        return <Grid item key={tl.id}>\n            <Paper elevation={6} style={{padding: \"20px\"}}>\n                <TodoList\n                    id={tl.id}\n                    title={tl.title}\n                    tasks={tasks[tl.id]}\n                    changeTodoListFilter={changeTodoListFilter}\n                    removeTask={removeTask}\n                    addTask={addTask}\n                    filter={tl.filter}\n                    changeTaskStatus={changeTaskStatus}\n                    removeTodoList={removeTodoList}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                />\n            </Paper>\n        </Grid>\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar style={{justifyContent: \"space-between\"}}>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoLists\n                    </Typography>\n                    <Button variant={\"outlined\"} color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid container style={{padding: \"20px 0px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n\n                <Grid container spacing={5}>\n                    {todoListComponents}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux\n\n","import {tasksReducer} from './tasks-reducer';\nimport {combineReducers, createStore} from 'redux';\nimport {todoListReducer} from \"./todolists-reducer\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todoListReducer\n})\n\nexport const store = createStore(rootReducer);\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}